<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>학과 공부 on bong-u/til</title><link>https://bong-u.github.io/til/school/</link><description>Recent content in 학과 공부 on bong-u/til</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bong-u.github.io/til/school/index.xml" rel="self" type="application/rss+xml"/><item><title>네트워크 보안</title><link>https://bong-u.github.io/til/school/network_security/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/network_security/</guid><description>네트워크 보안 개요 네트워크 보안의 요구사항 기밀성(Confidentiality) 정보를 권한이 없는 개인에게 노출되지 않도록 함
무결성(Integrity) 정보와 프로그램은 인가된 방식으로만 변경되도록 함
가용성(Availability) 정보 자산에 대해 적절한 시간에 접근 가능하도록 함
보안 공격의 종류 소극적 공격(Passive Attack) 정보를 도청하거나 감시하는 공격 방어방법 : 암호화 적극적 공격(Active Attack) 정보를 변조하거나 삭제하는 공격 방어방법 : 메시지 인증 보안 서비스 인증(Authentication) 사용자의 신원을 확인하는 과정</description></item><item><title>SQLD 대비 정리</title><link>https://bong-u.github.io/til/school/sqld/</link><pubDate>Thu, 09 May 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/sqld/</guid><description>과목 1 : 데이터 모델링의 이해 데이터 모델링을 할때 유의 사항 중복 : 여러 장소에 같은 정보 X 비유연성 : 데이터의 정의와 사용 프로세스를 분리 -&amp;gt; 데이터가 적게 변화되도록 비일관성 : 데이터 간의 상호 연관관계를 명확히 정의 데이터 모델링의 종류 개념적 데이터 모델링 물리적 데이터 모델링 데이터 베이스 모델링의 특징 추상화, 단순화, 명확화
데이터베이스 스키마의 구조 외부 스키마 : 사용자 관점의 데이터베이스 구조 개념 스키마 : 전체 데이터베이스의 논리적 구조 내부 스키마 : 물리적 저장장치에 대한 데이터베이스 구조 엔터티의 특징 반드시 해당 업무에서 필요하고 관리하고자 하는 정보여야한다.</description></item><item><title>프로그래밍언어개론</title><link>https://bong-u.github.io/til/school/plt/</link><pubDate>Sun, 14 Apr 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/plt/</guid><description>Ocaml Functional Programming 함수형 프로그래밍은 함수를 값처럼 다루는 프로그래밍 패러다임
특징 Immutable 변수의 값이 변하지 않는다
First-class function Higher-order function Referential transparency 동일한 인자에 대해 항상 동일한 결과를 반환한다
Lazy evaluation (지연 계산) 필요할 때만 계산을 수행
Primitive Types unit int float int_of_float : float-&amp;gt;int float_of_int : int-&amp;gt;float bool : true/false x = y : x equals y (structural equality) x &amp;lt;&amp;gt; y : x not equals y (structural equality) x == y : x equals y (physical equality) x !</description></item><item><title>웹 보안</title><link>https://bong-u.github.io/til/school/web_security/</link><pubDate>Mon, 11 Mar 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/web_security/</guid><description>Web Security Model Web 보안의 목표 Integirty : 무결성 Confidentiality : 기밀성 HTTP URL https:// www.example.edu :80 /lectures ?lec=80 #slides protocol + hostname + port + path + query + fragment
Cookies 서버가 웹 브라우저에게 보내는 정보
역할 : 세션 관리, 사용자 설정 저장, 사용자 추적 등 1// 쿠키 설정 2Set-Cookie: name=value; 3// 쿠키 전송 4Cookie: name=value; Same Origin Policy (SOP) 같은 Origin에서만 리소스를 공유할 수 있도록 한다</description></item><item><title>인간-컴퓨터 상호작용</title><link>https://bong-u.github.io/til/school/human_computer_interface/</link><pubDate>Mon, 04 Mar 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/human_computer_interface/</guid><description>Design Techniques Contextual Inquiry 사용자의 환경에서 사용자의 행동을 관찰 Design Funnel 아이디어를 확장함과 동시에 축소 시킴으로서 결과 도출 Double Diamond Discover -&amp;gt; Define -&amp;gt; Develop -&amp;gt; Deliver Storyboarding 시나리오를 그림으로 표현 Prototyping 디자인을 표현하는 소프트웨어로 구현 종류: Low-fidelity(충실도가 낮음), High-fidelity(충실도가 높음) User Testing In-lab vs On-site Moderated vs Unmoderated : Exploratory vs Assessment Presentation &amp;amp; Communication Needfinding (요구사항 도출) 용어 UI (User Interface) 제품의 시각적인 요소</description></item><item><title>소프트웨어공학</title><link>https://bong-u.github.io/til/school/software_engineering/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/software_engineering/</guid><description>1장 소프트웨어 공학 개요 소프트웨어의 종류 주문형, 패키지형, 임베디드 시스템 실시간 소프트웨어, 자료처리 소프트웨어 소프트웨어 공학의 정의 IEEE : 소프트웨어의 개발, 운용, 유지보수 및 파기에 대한 체계적인 접근 W.Humphrey : 질 좋은 소프트웨어를 경제적으로 생산하기 위하여 공학, 과학, 수학적 원리에 의하여 소프트웨어를 개발해야한다 소프트웨어 품질 (효-용-신-유-재-) 효율성(efficiency) 사용용이성(usability) 신뢰성(reliability) 유지보수성(maintainability) 재사용성(reusability) 소프트웨어 프로젝트 작업 요구분석과 명세화 도메인 분석, 문제 정의, 요구 추출, 요구 분석, 요구 명세화 설계 : 가용한 기술로 어떻게 구현되어야하는지 기술 시스템 엔지니어링, 소프트웨어 아키텍쳐 UI 설계, DB 설계 모델링 : 도메인이나 소프트웨어의 표현을 만들어 나가는 과정 유스케이스 모델링 정적 모델링, 동적 모델링, 행위 모델링 프로그래밍 품질보증 리뷰, 인스펙션, 테스트 배포 프로세스 관리 2장 소프트웨어 프로세스 폭포수 모델 (Waterfall Model) 각 단계가 다음 시작 전에 끝나야 함 -&amp;gt; 느림 프로토타입과 재사용의 기회가 줄어듦 프로토타입 모델 (Prototyping Model) 인간-기계 상호작용 프로토타입 프로토타입을 만든다 - 프로토타입을 평가한다 점증적 모델 (Incremental Model) 점증적 방법: 기능별로 릴리즈 반복적 방법: 릴리즈 할때마다 기능의 완성도를 높인다 기능이 부족하더라도 빨리 릴리즈 가능 나선형 모델 (Spiral Model) 진화 단계 계획 수립 위험 분석 개발 평가 반복적인 개발 및 테스트 -&amp;gt; 강인성 향상 관리, 위험 분석이 중요 진화적 모델 (Evolutionary Model) 초기에 요구사항을 파악하기 힘들고 구현이 어려운 경우, 요구사항 분석을 한 번이상 반복 UP (Unified Process) 도입 단계 : 프로젝트의 범위를 설정, 목표를 명확히 정련 단계 : 요구를 찾아내어 설계를 완성 구축 단계 : 제조 단계, 요구의 테스트 마무리 전환 단계 : 릴리즈 애자일 프로세스 (Agile Process) 특징 짧은 릴리즈와 반복 점증적 설계 사용자 참여 문서 최소화 비공식적 커뮤니케이션 요구와 환경의 변화를 가정 익스트림 프로그래밍 (eXtreme Pragramming) 애자일 방법론 중 하나 Planning : 요구사항을 작은 요소로 분할 Analysis Design Execution : Coding, Testing Wrapping : small release, process improvement Closure : launch 스크럼 (Scrum) 조직적으로 애자일 방법론을 적용</description></item><item><title>컴퓨터네트워크</title><link>https://bong-u.github.io/til/school/computer_network/</link><pubDate>Mon, 16 Oct 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/computer_network/</guid><description>HTTP HTTP Method Method request payload response payload idempotent GET Optional O O HEAD Optional O O POST Yes O X PUT Yes O O DELETE Optional O O CONNECT Optional O X OPTIONS Optional O O TRACE Optional O O PATCH Yes O X HTTP Protocol Version HTTP/1.</description></item><item><title>영화와 문학</title><link>https://bong-u.github.io/til/school/film_and_literature/</link><pubDate>Wed, 11 Oct 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/film_and_literature/</guid><description>매체 변환이란 소설, 희곡, 시, 영화 등 각각의 매체 형식을 다른 종류의 매체 형식으로 변환하는 것
뤼미에르 형제에 의해서 영화가 발명된 후, 1910년대부터 기존 문학 작품을 영화의 형식에 맞도록 각색하는 양상이 인기를 얻게 됨.
매체 변환 양상 분석 과정에서 고려해야할 사항
구성의 생략과 압축 텍스트 -&amp;gt; 영화, 시공간적 제약을 받을 수 밖에 없다 따라서, 생략과 압축은 할 수 밖에 없다 시간과 공간의 영상적 변환 시공간을 처리하는 방식은 매체에 따라 달라질 수 밖에 없다.</description></item><item><title>컴파일러개론</title><link>https://bong-u.github.io/til/school/compiler/</link><pubDate>Fri, 01 Sep 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/compiler/</guid><description>개요 컴퓨터와 인간이 소통하는 방법 어셈블리어 어셈블리어의 번역기는 어셈블러(Assembler)라고 한다 cpu칩셋이 바뀔때마다 어셈블리어가 바뀐다 고급언어 고급언어의 번역기는 컴파일러(Compiler)라고 한다 컴파일러의 정확한 정의 어떤 언어로 쓰여진 프로그램을 같은 역할의 다른 언어로 바꿔주는 프로그램
1952년 그레이스 호퍼(Grace Hopper)가 UNIVAC용 프로그래밍언어 A-0 컴파일러를 제작 컴파일러 vs 인터프리터 프로그램 처리과정 컴파일러의 처리 과정 Lexical analysis (어휘 분석) token을 생성하는일, token은 어휘의 최소 단위 Syntax analysis (구문 분석) token을 읽어서 오류를 검색, 구문 구조를 만든다 (주로 트리형태) Semantic analysis (의미 분석) type checking Intermediate code generation (중간 코드 생성) 중간 코드로 변환 Code optimization (코드 최적화) 중간 코드를 더 효율적으로 변환 Code generation (코드 생성) 목적 코드 생성 Lexical analysis (어휘 분석) token : 문법적으로 의미있는 최소 단위 FSA (Finite State Automata, 유한 상태 오토마타) token을 인식하는 방법 시작 상태 한 개와 끝 상태 여러 개를 가짐 DFA (Deterministic Finite Automata) FSA의 한 종류 각 상태에서 뻗어나가는 edge가 하나씩만 존재 ε가 붙은 edge 없음 분석한 토큰을 표현하는 방법 Lexeme = &amp;lt;토큰번호, 토큰 값&amp;gt;</description></item><item><title>운영체제 - 기말범위</title><link>https://bong-u.github.io/til/school/operatingsystem2/</link><pubDate>Mon, 29 May 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/operatingsystem2/</guid><description>06-File-Management Directory File Directory Directory도 일종의 파일이다 해당 파일 FCB의 식별자만 저장한다 inode (index node) Unix에서는 FCB와 inode가 같다 모든 파일, 폴더가 Unique한 값을 가진다. (root는 2로 고정) File Systems 파티션의 구조 boot block, super block, FCB list, data blocks Partition Control block (Super block) blocks 개수, free data blocks 개수, free data blocks list 저장 inode table, free inode 개수, free inode list 저장 File Control Block (FCB) UNIX에서 128byte의 크기를 가진다 파일 이름, 파일 크기, uid, gid, 파일 주소 등등 저장 Management of Data Blocks Contiguous Allocation 각각의 파일을 연속적으로 저장 Direct Access File grow problem 존재 External fragmentation, Internal fragmentation 발생 Chained Allocation Direct acess File grow problem X External fragmentation X Poor data safety (앞 블록에 문제가 생기면 뒤 블록도 사용 불가능) Indexed Allocation (현대에 사용) Direct access File grow problem X External fragmentation X Medium level data safety (index block만 괜찮으면 된다) Index block이 추가로 필요하다 Free-Space Management Counting N-M&amp;hellip; N번부터 M개의 블록이 비어있다.</description></item><item><title>최신컴퓨터특강</title><link>https://bong-u.github.io/til/school/%EC%B5%9C%EC%8B%A0%EC%BB%B4%ED%93%A8%ED%84%B0%ED%8A%B9%EA%B0%95/</link><pubDate>Wed, 12 Apr 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/%EC%B5%9C%EC%8B%A0%EC%BB%B4%ED%93%A8%ED%84%B0%ED%8A%B9%EA%B0%95/</guid><description>1주차 - 원유재 교수님 - 첨단분야 혁신융합대학사업 (COSS: Convergence and Open Sharing System) 추진배경 : 디지털 전환, 글로벌 경쟁 심화에 따라 신기술 초격차 확보 및 급증하는 신산업 인력 수요에 대응할 수 있는 인재 양성 충남대학교 : 블록체인 분야 특화, 연구협력(연구단지) 중심 특화 5개 융복합창의전공 블록체인융합전공 사이버보안융합전공 클라우드융합전공 데이터보안활용융합전공 : 컴퓨터 비전공자 대상 개인정보보호융합전공 25-1학기 충남대학교 개설 과목 블록체인 개론 블록체인 프로그래밍 디지털 자산과 블록체인 학생지원 혁신융합대학 학위 취득 장학금 지원 전문가와 교류 기회 학습기기 지원 현장실습 기회 3주차 - 김형신 교수님 AI기술의 임베디드 시스템화 이유 Privacy (개인정보 보호) Latency (지연시간) Cost (비용) Embedding Resnet Resnet을 임베디드 시스템에 적용함</description></item><item><title>Spring Boot Framework - KAKAO 김가연 선배님</title><link>https://bong-u.github.io/til/school/spring_boot/</link><pubDate>Mon, 03 Apr 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/spring_boot/</guid><description>REST API REprensentational State Transfer 웹의 장점을 최대한 활용할 수 있는 아키텍처 Layered Architecture Presentation Layer 비즈니스 로직과 UI를 분리 @Controller가 붙은 클래스가 이에 해당 Service Layer 비즈니스 로직 구현 @Service가 붙은 클래스가 이에 해당 Data Access Layer 데이터를 조회, 등록, 수정, 삭제 @Repository가 붙은 클래스가 이에 해당 IoC Inversion of Control : 제어의 역전 모든 객체에 대한 제어권이 바뀌었음을 의미 객체의 주인이 개발자가 아닌 Spring application DI Constructor Injection</description></item><item><title>데이터통신</title><link>https://bong-u.github.io/til/school/data_communication/</link><pubDate>Sun, 26 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/data_communication/</guid><description>메시지(패킷, 프레임), 계층 OSI 7 Model Physical Data Link Network Transport Session Presentation Application TCP/IP 계층 계층 이름 메시지 형태 내용 1 Phisical Bits Bits 2 Data Link Ethernet Frame Ethernet 주소 3 Network IP packet, Datagram IP 주소 4 Transport TCP Segment, UDP Datagram Port 번호 5 Application HTTP 메시지, Email 메시지 URL, Email 주소 Protocol Suite HTTP - TCP - IP - ARP 아날로그 신호 - 사인 함수 $$ y(t) = A sin(2\pi ft + \varphi) $$</description></item><item><title>Git 특강 - 네이버 정다현 선배님</title><link>https://bong-u.github.io/til/school/git/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/git/</guid><description>버전 관리 시스템 중앙집중식 버전 관리(CVCS) Centralized Version Control System
CVCS의 종류 : SVN, Perforce, CVS
문제
중앙 서버의 부하가 큼 오프라인에서는 사용이 불가능 분산 버전 관리 시스템 (DVCS) Decentralized Version Control System DVCS의 종류 : Git, Mercurial, Bazaar Git command gst : git status git log &amp;ndash;oneline : commit을 한줄로 출력 git log &amp;ndash;all &amp;ndash;graph : 그래프로 출력 merge의 3가지 종류 merge : 모든 commit들이 merge commit과 함께 merge squash and merge : 모든 commit들을 하나의 새로운 commit으로 요약하여 merge rebase and merge : 분기가 발생한 기준이 되는 base를 변경 특정 commit으로 롤백하는 방법 reset : commit 이력을 남기지 않고 되돌리기 revert : commit 이력을 남기고 되돌린다 현업에서는 revert를 주로 사용 reset git reset HEAD~ 옵션 &amp;ndash;soft : HEAD 위치 변경, 파일 변화 없음, commit 직전의 상황 &amp;ndash;mixed (default) : add하기 전으로 되돌려 준다, unstaged로 되돌려준다 &amp;ndash;hard : 변경 내용이 모두 사라짐 &amp;ndash;merge : merge 후에 되돌리기 위해서 사용 revert git revert HEAD cherry-pick git cherry pick &amp;lt;commit id&amp;gt; 다른 브랜치의 특정 commit 만을 가져 올 때 사용 Markdown 글자 하이라이트 *글자 기울이기* **굵은 글씨** ~~취소 선~~ 수평선 ---</description></item><item><title>230315 기프랩 Design Thinking 방법론 - 김재정 교수님</title><link>https://bong-u.github.io/til/school/basicprojectlab_design_thinking/</link><pubDate>Wed, 15 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/basicprojectlab_design_thinking/</guid><description>디자인 씽킹이란 공감의 과정을 통해 문제점을 찾아내고, 아이디어를 발산하고, 프로토타입을 만들어 검증 과정을 거치는, 반복적 프로세스에 대한 방법론 및 사고방식 디자인 씽킹 프로세스 공감 - 문제 정의 - 아이디어 도출 - 프로토타이핑 - 테스팅 1. 공감 공감 프로세스 면담하기 관찰하기 경험하기 면담지 준비하기 순차적 경험 질문 : 어떤 순서로 행동하고 경험하는지 물어보자 감정 질문 이유 질문 : 행동 또는 감정에 대한 이유를 물어보자 또 질문 : &amp;ldquo;또&amp;hellip;&amp;ldquo;라는 질문을 많이 하자 구체화 질문 관찰하기 | 모니터링 현장 중심 관찰 : 세상을 넓고 깊게 바라보기 관찰하기 | 쉐도잉 사람의 체험이나 행동을 그자리에서 관찰하기 관찰하기 | 맥락 질의법 현장에서 관찰 및 면담을 통해 대상자에 대한 이해를 하는 방법</description></item><item><title>협업프로세스 - LINE 나도희 선배님</title><link>https://bong-u.github.io/til/school/collaborative_process/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/collaborative_process/</guid><description>IT 업계의 조직 구성 목적 조직 프로젝트 A : 기획, 개발자, 디자이너 프로젝트 B : 기획, 개발자, 디자이너 &amp;hellip; 프로젝트가 커지면 관리가 힘듦
기능 조직 기획 : 기획자, 기획자, 기획자 클라이언트 : 개발자, 개발자, 개발자 서버 : 개발자, 개발자, 개발자 부서내 개발자마다 하는 프로젝트가 다름
개발 방법론 Waterfall 개발 방법론 명확한 요구사항을 가지고 프로젝트를 진행 장점 대략적인 일정 산출이 가능함 프로젝트의 시작과 끝이 명확함 단점 피드백 처리가 느리다 중간에 수정이 어렵다 Agile 개발 방법론 짧은 개발 주기를 가지고 피드백을 계속 반영하면서 진행 단점 프로젝트의 시작과 끝이 명확하지 않다 프로젝트 관리가 상대적으로 어려움이 있음 Kanban : 프로젝트 관리 도구 카드를 이용해서 &amp;ldquo;할일&amp;rdquo;, &amp;ldquo;진행 중&amp;rdquo;, &amp;ldquo;완료&amp;rdquo; 항목을 나누어서 각 테스크의 상태를 관리하는 보드</description></item><item><title>운영체제 - 중간범위</title><link>https://bong-u.github.io/til/school/operatingsystem1/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/operatingsystem1/</guid><description>운영체제 개요 운영체제의 역할 Program execution Access to computer resources (I/O device, Data&amp;hellip;) Error detection and response Accounting (ex: task manager) 운영체제의 발전 Serial Processing : No OS, No Job scheduling
Simple batch system
OS가 job을 할당 Controlled by monitor Uni-programming
다 실행될때까지 기다림 bad utilization Multiprogramming
The processor can switch to the other job better utilization, needs more memory Time sharing</description></item><item><title>프로그래머로 산다는 것 (리더의 생각) - 쏘카 류석문 CTO님</title><link>https://bong-u.github.io/til/school/socar_cto/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/socar_cto/</guid><description>개발자는 항상 변화하면서 성장해야 한다
개발자의 지속적인 성장 방법 깔끔한 코드 적절한 논리력 (= 문제 해결 능력) 개발이 완료 됐는지 검증하는 방법 ATDD (Acceptance Test Driven Development) : 고객, 개발자, 테스터 간의 커뮤니케이션을 기반으로 하는 개발 방법론 사용하는 코드만 만들기 (Celler Create) 리팩토링 (Refactoring) 코드 읽기 (Code Review) 알고리즘과 데이터 구조 (Don&amp;rsquo;t Reinvent The Wheel) 단순한 디자인 (Simple Design) 진화적 디자인 (Evolutionary Design) 협업 (Cooperative Design Design Review) 기술 벤치마킹 (Benchmarking) 이력서에 git repo 제출할 때, 꾸준히 개선하기 위해 고민하고 관리한 repo를 제출하자</description></item><item><title>자료구조</title><link>https://bong-u.github.io/til/school/data_structure/</link><pubDate>Thu, 02 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/data_structure/</guid><description>제 1장 : 자료구조를 배우기 위한 준비 (230302) 배열 배열(Array): 동일한 타입의 원소들이 연속적인 메모리 공간에 할당되어 있는 기초적인 자료구조 추상데이터 타입 추상데이터타입(ADT:Abstract Data Type) : 데이터와 그 데이터에 대한 추상적인 연산들로써 구성 ADT =~ 자바의 interface, 자료구조 =~ 자바의 class 자료구조는 추상데이터타입을 구체적으로 구현한 것 1-2 수행시간의 분석 알고리즘의 성능: 수행시간을 나타내는 **시간복잡도(Time Complexity)**와 알고리즘이 수행되는 동안 사용되는 메모리 공간의 크기를 나타내는 **공간복잡도(Space Complexity)**에 기반하여 분석 시간 복잡도</description></item><item><title>확률과 통계</title><link>https://bong-u.github.io/til/school/probabilityandstatistics/</link><pubDate>Thu, 02 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/probabilityandstatistics/</guid><description>자료의 정리와 요약 통계 자료의 구분
양적자료(quantitative data) 또는 수치형자료(numerical data) 이산자료(자녀 수), 연속자료(키) 질적자료(qualitative data) 또는 범주형자료(categorical data) 명목자료(혈액형, 성별), 순서자료(학점, 부서평가) 변수의 종류
1all variables 2├── numerical 3│ ├-─ continuous (리터 수) 4│ └-─ discrete (나라 수) 5└─── categorical 6 ├-─ Nominal (성별) 7 └-─ Ordinal (근무 한 시간 : 12-2) 도수분포표 자료의 특성을 기준으로 일정한 계급으로 나누고, 각 계급에 도수를 대응하여 작성한 표</description></item><item><title>쿠버네티스 및 MSA 특강 4일차 : MSA란 무엇인가</title><link>https://bong-u.github.io/til/school/%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EB%B0%8F-msa-%ED%8A%B9%EA%B0%95-4%EC%9D%BC%EC%B0%A8/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EB%B0%8F-msa-%ED%8A%B9%EA%B0%95-4%EC%9D%BC%EC%B0%A8/</guid><description>MSA란 무엇인가 마이크로서비스 개념 마이크로서비스(microservice)는 애플리케이션을 느슨하게 결합된 서비스의 모임으로 구조화하는 서비스 지향 아키텍처(SOA) 스타일의 일종인 소프트웨어 개발 기법이다 마이크로서비스 아키텍처에서 서비스들은 섬세(fine-grained)하고 프로토콜은 가벼운 편이다. 마이크로서비스 특징 자율성 : 각 구성 요소 서비스는 다른 서비스의 기능에 영향을 주지 않으면서 개발, 배포, 운영하고 확장 가능 전문성 : 각 서비스는 일련의 기능을 위해 설계되며 특정 문제를 해결하는 데 중점을 둔다 마이크로서비스의 기술적 특징 각각의 서비스는 그 크기가 작을 뿐, 서비스 자체는 하나의 모노리식 아키텍처와 유사한 구조를 갖는다 각각의 서비스는 독립적으로 배포가 가능해야 한다 각각의 서비스는 다른 서비스에 대한 의존성이 작아야 한다 각 서비스는 개별 프로세스로 구동되며, REST API와 같은 가벼운 방식으로 통신되어야 한다 마이크로서비스 이점 민첩성 : 소규모 컨텍스트 내에서 활동하며 더 독립적이면서 신속하게 업무를 수행할 수 있다 유연한 확장성 : 서비스가 지원하는 애플리케이션을 기능의 수요를 충족하도록 해당 서비스를 독립적으로 확장할 수 있다 손쉬운 배포 마이크로서비스를 위한 조건 비용 개발 생산성 운영 인프라 배포 주기</description></item><item><title>쿠버네티스 및 MSA 특강 3일차 : 모니터링 시스템 구축 실습 (ELK), kubernetes</title><link>https://bong-u.github.io/til/school/%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EB%B0%8F-msa-%ED%8A%B9%EA%B0%95-3%EC%9D%BC%EC%B0%A8/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EB%B0%8F-msa-%ED%8A%B9%EA%B0%95-3%EC%9D%BC%EC%B0%A8/</guid><description>모니터링 시스템 구축 실습 (ELK) ELK란 ELK는 Elasticsearch, Logstash 및 Kibana : 오픈 소스 프로젝트 세 개의 머리글
Elasticserach는 검색 및 분석 엔진 Logstash는 여러 소스에서 동시에 데이터를 수집하여 변환한 후 Elasticsearch 같은 &amp;ldquo;stash&amp;quot;로 전송하는 서버 사이드 데이터 처리 파이프라인 Kibana는 사용자가 Elasticsearch에서 차트와 그래프를 이용해 데이터를 시각화 Kibana Elasticsearch에 있는 데이터를 시각화할 수 있도록 하는 웹 브라우저 기반의 시각화 플랫폼
Elasticsearch에 있는 인덱스의 패턴을 찾아서, 데이터를 확인하거나, 시각화할 수 있도록 한다 Logstash 서버 데이터를 수집, 변환, 전송하는 데이터 처리 파이프라인으로, Jruby(JVM 기반 Ruby)로 개발되었다</description></item><item><title>쿠버네티스 및 MSA 특강 2일차 : Docker 실습</title><link>https://bong-u.github.io/til/school/%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EB%B0%8F-msa-%ED%8A%B9%EA%B0%95-2%EC%9D%BC%EC%B0%A8/</link><pubDate>Tue, 21 Feb 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EB%B0%8F-msa-%ED%8A%B9%EA%B0%95-2%EC%9D%BC%EC%B0%A8/</guid><description>Docker 실습 Docker란 무엇인가 Docker는 애플리케이션을 신속하게 구축, 테스트 및 배포할 수 있는 소프트웨어 플랫폼
Docker를 사용하는 이유 개선되고 완벽한 이식성 경량의 중량, 미세한 업데이트 자동화된 컨테이너 작성 컨테이너 버전화 컨테이너 재사용 공유 컨테이너 라이브러리 Docker 오케스트레이션 - Kubernetes Kubernetes는 Google에서 내부용으로 개발된 프로젝트에서 파생된 오픈소스 컨테이너 오케스트레이션 플랫폼 Docker에 자체 오케스트레이션 툴 (Docker Swarm)이 포함되어 있지만, 대부분의 개발자는 그 대신 Kubernetes를 선택한다 Kubernetes는 컨테이너 배치, 업데이트, 서비스감지, 스토리지 프로비저닝, 로드 밸런싱, 상태 모니터링 등을 포함하여 컨테이너 기반 아키텍처의 관리에 필수적인 태스크를 스케줄링하고 자동화한다</description></item><item><title>쿠버네티스 및 MSA 특강 1일차 : 클라우드 컴퓨팅 개념 및 역사</title><link>https://bong-u.github.io/til/school/%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EB%B0%8F-msa-%ED%8A%B9%EA%B0%95-1%EC%9D%BC%EC%B0%A8/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EB%B0%8F-msa-%ED%8A%B9%EA%B0%95-1%EC%9D%BC%EC%B0%A8/</guid><description>클라우드 제대로 이해하기 클라우드란 개인이 가진 단말기를 통해서는 주로 입/출력 작업만 이루어지고, 정보분석 및 처리, 저장, 관리 유통 등의 작업은 클라우드라고 불리는 제3의 공간에서 이루어지는 컴퓨팅 시스템 형태
클라우드 컴퓨팅이 필요한 이유 비용절감 속도향상 확장성 생산성 클라우드 컴퓨팅 서비스모델 Infrastructure as a Service (IaaS) : IT리소스에 대한 유연성과 관리 제어 기능을 제공 GCE, AWS, Azure Platform as a Service (Paas) : 빌드 및 배포를 위한 환경이 사용자에게 제공 Openshift, Github, docker, kubernetes Software as a a Service (Saas) : 완전한 제품 제공 GShift 비교 On-site &amp;lt; Iaas &amp;lt; Paas &amp;lt; Saas</description></item><item><title>221207 SYSP</title><link>https://bong-u.github.io/til/school/sysp_09_11/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/sysp_09_11/</guid><description>09-process1 예외적인 제어 흐름 하위 매커니즘 예외 (Exception) 상위 매커니즘 프로세스 컨텍스트 전환 OS 소프트웨어와 하드웨어 타이머로 구현 시그널 OS 소프트웨어로 구현 nolocal 점프 예외 테이블 (Exception Tables) 각 이벤트 타입은 예외번호 k를 갖는다 비동기형 예외 (Interrupt) 입출력 인터럽트 (ctrl + c)
하드 리셋 인터러트
소프트 리셋 인터럽트</description></item><item><title>221208 SYSP</title><link>https://bong-u.github.io/til/school/sysp_12_13/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/sysp_12_13/</guid><description>12-memory-1 메모리에 관한 불편한 진실 메모리는 무한의 자원이 아니다 동적 메모리 할당 직접(explicit) vs 간접(implicit) 메모리 할당기 직접 할당 : 응용프로그램이 할당하고, 반환한다 ex) malloc, free 간접 할당 : 응용프로그램이 할당하지만, 반환하지는 않는다 ex) java의 garbage collector 프로세스의 메모리 이미지 스택은 아래로, 힙은 위로 성장한다 sbrk 함수가 추가적인 힙 메모리를 운영체제로부터 요청한다 (brk 포인터 이동) Malloc package 1#include &amp;lt;stdlib.</description></item><item><title>객체지향설계</title><link>https://bong-u.github.io/til/school/ood/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/ood/</guid><description>Dynamic dispatch and Multiple inheritance Polymorphism Function overloading using compile time types of arguments Function overriding using runtime types of receiver objects virtual function for dynamic dispatch dynamic dispatch를 사용하기 위한 조건
함수가 virtual keyword로 정의되어 있어야 한다.
receiver object가 포인터(*), 참조(&amp;amp;)를 통해 refer되어야 한다
1// from parent class : Employee 2virtual std::string GetInfo() { 3 return &amp;#34;Employee: &amp;#34; + name_ ; 4} 5// from child class : Developer 6std::string GetInfo() { 7 return &amp;#34;Developer: &amp;#34; + name_; 8} override keyword override 키워드를 사용하는 이유 직관적인 코드</description></item><item><title>현대인의 생활문화</title><link>https://bong-u.github.io/til/school/mplc/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/mplc/</guid><description>글로벌 매너 매너 인간관계를 맺는데 있어 중요한 요소
어원 : Manus(손, 행동, 습관) + Arius(방법, 방식)
매너의 기본(1)
다른 사람의 인격을 존중하고, 배려하는 마음을 가지고, 편안하게 해주거나 기쁘게 만들려는 행동방식
매너의 기본(2)
역지사지 (易地思之)
매너의 기본(3)
형식에 치우치지 말고, 배려하는 마음을 전달하는 것
매너와 에티켓의 차이 매너(예의) : 상황에 따라 다르게 표현 가능 에티켓(범절) : 형식과 절차를 중요시 함 동양의 매너 5덕</description></item></channel></rss>